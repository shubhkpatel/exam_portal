spring initializer ->
	
	spring web : for running our server on web
	
	spring data jpa : to persist the data in database

	mysql driver : access mysql database


================================================================

cmd -> idea64 .

================================================================

make the schema in mysql workbench name exam

& Add the configuration in application.properties

	  database url
	  username
	  password
	  driver (optional)
	  hibernate dialect (orm tool to save java objects in db)
	  ddl-auto (auto update the table in db for first time)
	  show sql queries in console
	  format sql queries

================================================================

Create Entity

	User, Role, UserRole -> add properties and getter/setter

	
	@Entity    linking this class to table in db
	@Table 	 renaming the table name in db
	@Id 		 primary key
	@GeneratedValue 	automatically generate pk

	
	//one User will have many UserRole
	//1 UserRole will have 1 User

	@OneToMany(cascade = CascadeType.ALL, fetch = 	FetchType.EAGER)

	if we delete user then delete the role as well & 
	if we fetch fetch then get role as well


	mappedBy to reference to attribute of owning class as 	foreign key

	JoinColumn to name the foreign key


================================================================

Repository extends JpaRepository

	which extends CrudRepository & PagingAndSorting
	and also provides features like batch deletion

================================================================

Implement Service layer (createUser)

and call it in main method

================================================================


Implement the API class

	For Bean Validation -> use Dto/Entity class (@Valid)
	For Path Validation -> use API class (@Validated)

	For this add dependency of spring-boot-starter-validation

================================================================

Add centralized Exception Handler in utility so that in response of error, user can get readable messages

================================================================

FRONTEND :

	Create Angular App and Install Angular Material

================================================================

Start with Register Page -> Design

Used Reactive Form

Import ReactiveFormsModule

ngSubmit to submit and ngModel to bind with .ts 

[formGroup] to link the form
[formControlName] to link its field


To select field error -> userForm.controls['<fieldname>'].errors?.required


Created Pipe to show only 1 error at a time

Created Custom Validator for password which returns error obj

================================================================

Service Class for calling the backend api (Import HttpClientModule)

================================================================

Check SweetAlert and MatSnackBar (5-6 lines of code) for nice popups

================================================================

@ViewChild is used to select the DOM element

eg : <h1 #sel > </h1>

	@ViewChild('sel') myTag;
	
	const target = this.myTag.nativeElement;

	Now target is pointing to h1

================================================================

T-writer.js for typewriter effect 
	
	-> It provides apis for typing specific words, changing 	   color, pausing and going to next word typing

================================================================
